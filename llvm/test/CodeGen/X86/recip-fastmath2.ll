; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+sse2 | FileCheck %s --check-prefix=CHECK --check-prefix=SSE --check-prefix=SSE-RECIP
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mattr=+avx | FileCheck %s --check-prefix=CHECK --check-prefix=AVX --check-prefix=AVX-RECIP
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mcpu=btver2 | FileCheck %s --check-prefix=CHECK --check-prefix=AVX --check-prefix=BTVER2
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mcpu=sandybridge| FileCheck %s --check-prefix=CHECK --check-prefix=AVX --check-prefix=SANDY
; RUN: llc < %s -mtriple=x86_64-unknown-unknown -mcpu=haswell  | FileCheck %s --check-prefix=CHECK --check-prefix=AVX --check-prefix=HASWELL

; It's the extra tests coverage for recip as discussed on D26855.

define float @f32_no_step_2(float %x) #3 {
; SSE-LABEL: f32_no_step_2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpss %xmm0, %xmm0
; SSE-NEXT:    mulss {{.*}}(%rip), %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: f32_no_step_2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpss %xmm0, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: f32_no_step_2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vrcpss %xmm0, %xmm0, %xmm0
; BTVER2-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: f32_no_step_2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SANDY-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: f32_no_step_2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vrcpss %xmm0, %xmm0, %xmm0
; HASWELL-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; HASWELL-NEXT:    retq
  %div = fdiv fast float 1234.0, %x
  ret float %div
}

define float @f32_one_step_2(float %x) #1 {
; SSE-LABEL: f32_one_step_2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpss %xmm0, %xmm2
; SSE-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE-NEXT:    mulss %xmm2, %xmm0
; SSE-NEXT:    subss %xmm0, %xmm1
; SSE-NEXT:    mulss %xmm2, %xmm1
; SSE-NEXT:    addss %xmm2, %xmm1
; SSE-NEXT:    mulss {{.*}}(%rip), %xmm1
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: f32_one_step_2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpss %xmm0, %xmm0, %xmm1
; AVX-RECIP-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vsubss %xmm0, %xmm2, %xmm0
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vaddss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: f32_one_step_2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; BTVER2-NEXT:    vrcpss %xmm0, %xmm0, %xmm1
; BTVER2-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vsubss %xmm0, %xmm2, %xmm0
; BTVER2-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vaddss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: f32_one_step_2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SANDY-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: f32_one_step_2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; HASWELL-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; HASWELL-NEXT:    retq
  %div = fdiv fast float 3456.0, %x
  ret float %div
}

define float @f32_two_step_2(float %x) #2 {
; SSE-LABEL: f32_two_step_2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpss %xmm0, %xmm2
; SSE-NEXT:    movss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SSE-NEXT:    movaps %xmm0, %xmm3
; SSE-NEXT:    mulss %xmm2, %xmm3
; SSE-NEXT:    movaps %xmm1, %xmm4
; SSE-NEXT:    subss %xmm3, %xmm4
; SSE-NEXT:    mulss %xmm2, %xmm4
; SSE-NEXT:    addss %xmm2, %xmm4
; SSE-NEXT:    mulss %xmm4, %xmm0
; SSE-NEXT:    subss %xmm0, %xmm1
; SSE-NEXT:    mulss %xmm4, %xmm1
; SSE-NEXT:    addss %xmm4, %xmm1
; SSE-NEXT:    mulss {{.*}}(%rip), %xmm1
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: f32_two_step_2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpss %xmm0, %xmm0, %xmm1
; AVX-RECIP-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm0, %xmm3
; AVX-RECIP-NEXT:    vsubss %xmm3, %xmm2, %xmm3
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm3, %xmm3
; AVX-RECIP-NEXT:    vaddss %xmm1, %xmm3, %xmm1
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vsubss %xmm0, %xmm2, %xmm0
; AVX-RECIP-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vaddss %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: f32_two_step_2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovss {{.*#+}} xmm2 = mem[0],zero,zero,zero
; BTVER2-NEXT:    vrcpss %xmm0, %xmm0, %xmm1
; BTVER2-NEXT:    vmulss %xmm1, %xmm0, %xmm3
; BTVER2-NEXT:    vsubss %xmm3, %xmm2, %xmm3
; BTVER2-NEXT:    vmulss %xmm1, %xmm3, %xmm3
; BTVER2-NEXT:    vaddss %xmm1, %xmm3, %xmm1
; BTVER2-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vsubss %xmm0, %xmm2, %xmm0
; BTVER2-NEXT:    vmulss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vaddss %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vmulss {{.*}}(%rip), %xmm0, %xmm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: f32_two_step_2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; SANDY-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: f32_two_step_2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovss {{.*#+}} xmm1 = mem[0],zero,zero,zero
; HASWELL-NEXT:    vdivss %xmm0, %xmm1, %xmm0
; HASWELL-NEXT:    retq
  %div = fdiv fast float 6789.0, %x
  ret float %div
}

define <4 x float> @v4f32_one_step2(<4 x float> %x) #1 {
; SSE-LABEL: v4f32_one_step2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpps %xmm0, %xmm2
; SSE-NEXT:    movaps ${{\.LCPI.*}}, %xmm1
; SSE-NEXT:    mulps %xmm2, %xmm0
; SSE-NEXT:    subps %xmm0, %xmm1
; SSE-NEXT:    mulps %xmm2, %xmm1
; SSE-NEXT:    addps %xmm2, %xmm1
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm1
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: v4f32_one_step2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpps %xmm0, %xmm1
; AVX-RECIP-NEXT:    vmovaps {{.*#+}} xmm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vsubps %xmm0, %xmm2, %xmm0
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vaddps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vmulps {{.*}}(%rip), %xmm0, %xmm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: v4f32_one_step2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovaps {{.*#+}} xmm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; BTVER2-NEXT:    vrcpps %xmm0, %xmm1
; BTVER2-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vsubps %xmm0, %xmm2, %xmm0
; BTVER2-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vaddps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vmulps {{.*}}(%rip), %xmm0, %xmm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: v4f32_one_step2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovaps {{.*#+}} xmm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00]
; SANDY-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: v4f32_one_step2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovaps {{.*#+}} xmm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00]
; HASWELL-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; HASWELL-NEXT:    retq
  %div = fdiv fast <4 x float> <float 1.0, float 2.0, float 3.0, float 4.0>, %x
  ret <4 x float> %div
}

define <4 x float> @v4f32_two_step2(<4 x float> %x) #2 {
; SSE-LABEL: v4f32_two_step2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpps %xmm0, %xmm2
; SSE-NEXT:    movaps ${{\.LCPI.*}}, %xmm1
; SSE-NEXT:    movaps %xmm0, %xmm3
; SSE-NEXT:    mulps %xmm2, %xmm3
; SSE-NEXT:    movaps %xmm1, %xmm4
; SSE-NEXT:    subps %xmm3, %xmm4
; SSE-NEXT:    mulps %xmm2, %xmm4
; SSE-NEXT:    addps %xmm2, %xmm4
; SSE-NEXT:    mulps %xmm4, %xmm0
; SSE-NEXT:    subps %xmm0, %xmm1
; SSE-NEXT:    mulps %xmm4, %xmm1
; SSE-NEXT:    addps %xmm4, %xmm1
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm1
; SSE-NEXT:    movaps %xmm1, %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: v4f32_two_step2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpps %xmm0, %xmm1
; AVX-RECIP-NEXT:    vmovaps {{.*#+}} xmm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm0, %xmm3
; AVX-RECIP-NEXT:    vsubps %xmm3, %xmm2, %xmm3
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm3, %xmm3
; AVX-RECIP-NEXT:    vaddps %xmm1, %xmm3, %xmm1
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vsubps %xmm0, %xmm2, %xmm0
; AVX-RECIP-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vaddps %xmm1, %xmm0, %xmm0
; AVX-RECIP-NEXT:    vmulps {{.*}}(%rip), %xmm0, %xmm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: v4f32_two_step2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovaps {{.*#+}} xmm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; BTVER2-NEXT:    vrcpps %xmm0, %xmm1
; BTVER2-NEXT:    vmulps %xmm1, %xmm0, %xmm3
; BTVER2-NEXT:    vsubps %xmm3, %xmm2, %xmm3
; BTVER2-NEXT:    vmulps %xmm1, %xmm3, %xmm3
; BTVER2-NEXT:    vaddps %xmm1, %xmm3, %xmm1
; BTVER2-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vsubps %xmm0, %xmm2, %xmm0
; BTVER2-NEXT:    vmulps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vaddps %xmm1, %xmm0, %xmm0
; BTVER2-NEXT:    vmulps {{.*}}(%rip), %xmm0, %xmm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: v4f32_two_step2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovaps {{.*#+}} xmm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00]
; SANDY-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: v4f32_two_step2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovaps {{.*#+}} xmm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00]
; HASWELL-NEXT:    vdivps %xmm0, %xmm1, %xmm0
; HASWELL-NEXT:    retq
  %div = fdiv fast <4 x float> <float 1.0, float 2.0, float 3.0, float 4.0>, %x
  ret <4 x float> %div
}

define <8 x float> @v8f32_one_step2(<8 x float> %x) #1 {
; SSE-LABEL: v8f32_one_step2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpps %xmm0, %xmm4
; SSE-NEXT:    movaps ${{\.LCPI.*}}, %xmm2
; SSE-NEXT:    mulps %xmm4, %xmm0
; SSE-NEXT:    movaps %xmm2, %xmm3
; SSE-NEXT:    subps %xmm0, %xmm3
; SSE-NEXT:    mulps %xmm4, %xmm3
; SSE-NEXT:    addps %xmm4, %xmm3
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm3
; SSE-NEXT:    rcpps %xmm1, %xmm0
; SSE-NEXT:    mulps %xmm0, %xmm1
; SSE-NEXT:    subps %xmm1, %xmm2
; SSE-NEXT:    mulps %xmm0, %xmm2
; SSE-NEXT:    addps %xmm0, %xmm2
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm2
; SSE-NEXT:    movaps %xmm3, %xmm0
; SSE-NEXT:    movaps %xmm2, %xmm1
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: v8f32_one_step2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpps %ymm0, %ymm1
; AVX-RECIP-NEXT:    vmovaps {{.*#+}} ymm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vsubps %ymm0, %ymm2, %ymm0
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: v8f32_one_step2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovaps {{.*#+}} ymm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; BTVER2-NEXT:    vrcpps %ymm0, %ymm1
; BTVER2-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vsubps %ymm0, %ymm2, %ymm0
; BTVER2-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: v8f32_one_step2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; SANDY-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: v8f32_one_step2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; HASWELL-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; HASWELL-NEXT:    retq
  %div = fdiv fast <8 x float> <float 1.0, float 2.0, float 3.0, float 4.0, float 5.0, float 6.0, float 7.0, float 8.0>, %x
  ret <8 x float> %div
}

define <8 x float> @v8f32_two_step2(<8 x float> %x) #2 {
; SSE-LABEL: v8f32_two_step2:
; SSE:       # BB#0:
; SSE-NEXT:    movaps %xmm1, %xmm2
; SSE-NEXT:    rcpps %xmm0, %xmm3
; SSE-NEXT:    movaps ${{\.LCPI.*}}, %xmm1
; SSE-NEXT:    movaps %xmm0, %xmm4
; SSE-NEXT:    mulps %xmm3, %xmm4
; SSE-NEXT:    movaps %xmm1, %xmm5
; SSE-NEXT:    subps %xmm4, %xmm5
; SSE-NEXT:    mulps %xmm3, %xmm5
; SSE-NEXT:    addps %xmm3, %xmm5
; SSE-NEXT:    mulps %xmm5, %xmm0
; SSE-NEXT:    movaps %xmm1, %xmm3
; SSE-NEXT:    subps %xmm0, %xmm3
; SSE-NEXT:    mulps %xmm5, %xmm3
; SSE-NEXT:    addps %xmm5, %xmm3
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm3
; SSE-NEXT:    rcpps %xmm2, %xmm0
; SSE-NEXT:    movaps %xmm2, %xmm4
; SSE-NEXT:    mulps %xmm0, %xmm4
; SSE-NEXT:    movaps %xmm1, %xmm5
; SSE-NEXT:    subps %xmm4, %xmm5
; SSE-NEXT:    mulps %xmm0, %xmm5
; SSE-NEXT:    addps %xmm0, %xmm5
; SSE-NEXT:    mulps %xmm5, %xmm2
; SSE-NEXT:    subps %xmm2, %xmm1
; SSE-NEXT:    mulps %xmm5, %xmm1
; SSE-NEXT:    addps %xmm5, %xmm1
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm1
; SSE-NEXT:    movaps %xmm3, %xmm0
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: v8f32_two_step2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpps %ymm0, %ymm1
; AVX-RECIP-NEXT:    vmovaps {{.*#+}} ymm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm0, %ymm3
; AVX-RECIP-NEXT:    vsubps %ymm3, %ymm2, %ymm3
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm3, %ymm3
; AVX-RECIP-NEXT:    vaddps %ymm1, %ymm3, %ymm1
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vsubps %ymm0, %ymm2, %ymm0
; AVX-RECIP-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; AVX-RECIP-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: v8f32_two_step2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vmovaps {{.*#+}} ymm2 = [1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00,1.000000e+00]
; BTVER2-NEXT:    vrcpps %ymm0, %ymm1
; BTVER2-NEXT:    vmulps %ymm1, %ymm0, %ymm3
; BTVER2-NEXT:    vsubps %ymm3, %ymm2, %ymm3
; BTVER2-NEXT:    vmulps %ymm1, %ymm3, %ymm3
; BTVER2-NEXT:    vaddps %ymm1, %ymm3, %ymm1
; BTVER2-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vsubps %ymm0, %ymm2, %ymm0
; BTVER2-NEXT:    vmulps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vaddps %ymm1, %ymm0, %ymm0
; BTVER2-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: v8f32_two_step2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; SANDY-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: v8f32_two_step2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; HASWELL-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; HASWELL-NEXT:    retq
  %div = fdiv fast <8 x float> <float 1.0, float 2.0, float 3.0, float 4.0, float 5.0, float 6.0, float 7.0, float 8.0>, %x
  ret <8 x float> %div
}

define <8 x float> @v8f32_no_step(<8 x float> %x) #3 {
; SSE-LABEL: v8f32_no_step:
; SSE:       # BB#0:
; SSE-NEXT:    rcpps %xmm0, %xmm0
; SSE-NEXT:    rcpps %xmm1, %xmm1
; SSE-NEXT:    retq
;
; AVX-LABEL: v8f32_no_step:
; AVX:       # BB#0:
; AVX-NEXT:    vrcpps %ymm0, %ymm0
; AVX-NEXT:    retq
  %div = fdiv fast <8 x float> <float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0, float 1.0>, %x
  ret <8 x float> %div
}

define <8 x float> @v8f32_no_step2(<8 x float> %x) #3 {
; SSE-LABEL: v8f32_no_step2:
; SSE:       # BB#0:
; SSE-NEXT:    rcpps %xmm0, %xmm0
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm0
; SSE-NEXT:    rcpps %xmm1, %xmm1
; SSE-NEXT:    mulps {{.*}}(%rip), %xmm1
; SSE-NEXT:    retq
;
; AVX-RECIP-LABEL: v8f32_no_step2:
; AVX-RECIP:       # BB#0:
; AVX-RECIP-NEXT:    vrcpps %ymm0, %ymm0
; AVX-RECIP-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; AVX-RECIP-NEXT:    retq
;
; BTVER2-LABEL: v8f32_no_step2:
; BTVER2:       # BB#0:
; BTVER2-NEXT:    vrcpps %ymm0, %ymm0
; BTVER2-NEXT:    vmulps {{.*}}(%rip), %ymm0, %ymm0
; BTVER2-NEXT:    retq
;
; SANDY-LABEL: v8f32_no_step2:
; SANDY:       # BB#0:
; SANDY-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; SANDY-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; SANDY-NEXT:    retq
;
; HASWELL-LABEL: v8f32_no_step2:
; HASWELL:       # BB#0:
; HASWELL-NEXT:    vmovaps {{.*#+}} ymm1 = [1.000000e+00,2.000000e+00,3.000000e+00,4.000000e+00,5.000000e+00,6.000000e+00,7.000000e+00,8.000000e+00]
; HASWELL-NEXT:    vdivps %ymm0, %ymm1, %ymm0
; HASWELL-NEXT:    retq
  %div = fdiv fast <8 x float> <float 1.0, float 2.0, float 3.0, float 4.0, float 5.0, float 6.0, float 7.0, float 8.0>, %x
  ret <8 x float> %div
}

attributes #0 = { "unsafe-fp-math"="true" "reciprocal-estimates"="!divf,!vec-divf" }
attributes #1 = { "unsafe-fp-math"="true" "reciprocal-estimates"="divf,vec-divf" }
attributes #2 = { "unsafe-fp-math"="true" "reciprocal-estimates"="divf:2,vec-divf:2" }
attributes #3 = { "unsafe-fp-math"="true" "reciprocal-estimates"="divf:0,vec-divf:0" }

