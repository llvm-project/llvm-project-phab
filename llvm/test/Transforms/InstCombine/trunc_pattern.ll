; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt < %s -instcombine -S | FileCheck %s
target datalayout = "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64"

; Instcombine should be able to reduce expression of these truncate casts.

declare i32 @use32(i32)
declare i32 @use64(i64)
declare <2 x i32> @use32_vec(<2 x i32>)
declare <2 x i32> @use64_vec(<2 x i64>)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; These tests check cases where expression dag dominated by trunc instruction
;; contains instruction other than {zext, sext, trunc} has more than one usage.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

define void @multi_uses(i32 %X) {
; CHECK-LABEL: @multi_uses(
; CHECK-NEXT:    [[A1:%.*]] = zext i32 [[X:%.*]] to i64
; CHECK-NEXT:    [[B1:%.*]] = add i32 [[X]], 15
; CHECK-NEXT:    [[C1:%.*]] = mul i32 [[B1]], [[B1]]
; CHECK-NEXT:    [[R1:%.*]] = call i32 @use32(i32 [[C1]])
; CHECK-NEXT:    [[A2:%.*]] = zext i32 [[R1]] to i64
; CHECK-NEXT:    [[B2:%.*]] = or i32 [[R1]], 15
; CHECK-NEXT:    [[C2:%.*]] = mul i32 [[B2]], [[B2]]
; CHECK-NEXT:    [[R2:%.*]] = call i32 @use32(i32 [[C2]])
; CHECK-NEXT:    [[A3:%.*]] = zext i32 [[R2]] to i64
; CHECK-NEXT:    [[B3:%.*]] = xor i32 [[R2]], 15
; CHECK-NEXT:    [[C3:%.*]] = mul i32 [[B3]], [[B3]]
; CHECK-NEXT:    [[R3:%.*]] = call i32 @use32(i32 [[C3]])
; CHECK-NEXT:    [[A4:%.*]] = zext i32 [[R3]] to i64
; CHECK-NEXT:    [[B4:%.*]] = and i32 [[R3]], 15
; CHECK-NEXT:    [[C4:%.*]] = mul nuw nsw i32 [[B4]], [[B4]]
; CHECK-NEXT:    [[R4:%.*]] = call i32 @use32(i32 [[C4]])
; CHECK-NEXT:    [[A5:%.*]] = zext i32 [[R4]] to i64
; CHECK-NEXT:    [[B5:%.*]] = sub i32 [[R4]], [[R3]]
; CHECK-NEXT:    [[C5:%.*]] = mul i32 [[B5]], [[B5]]
; CHECK-NEXT:    [[R5:%.*]] = call i32 @use32(i32 [[C5]])
; CHECK-NEXT:    [[TMP1:%.*]] = call i32 @use64(i64 [[A1]])
; CHECK-NEXT:    [[TMP2:%.*]] = call i32 @use64(i64 [[A2]])
; CHECK-NEXT:    [[TMP3:%.*]] = call i32 @use64(i64 [[A3]])
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @use64(i64 [[A4]])
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @use64(i64 [[A5]])
; CHECK-NEXT:    ret void
;
  %A1 = zext i32 %X to i64
  %B1 = add i64 %A1, 15
  %C1 = mul i64 %B1, %B1
  %T1 = trunc i64 %C1 to i32
  %R1 = call i32 @use32(i32 %T1)

  %A2 = zext i32 %R1 to i64
  %B2 = or i64 %A2, 15
  %C2 = mul i64 %B2, %B2
  %T2 = trunc i64 %C2 to i32
  %R2 = call i32 @use32(i32 %T2)

  %A3 = zext i32 %R2 to i64
  %B3 = xor i64 %A3, 15
  %C3 = mul i64 %B3, %B3
  %T3 = trunc i64 %C3 to i32
  %R3 = call i32 @use32(i32 %T3)

  %A4 = zext i32 %R3 to i64
  %B4 = and i64 %A4, 15
  %C4 = mul i64 %B4, %B4
  %T4 = trunc i64 %C4 to i32
  %R4 = call i32 @use32(i32 %T4)

  %A5 = zext i32 %R4 to i64
  %B5 = sub i64 %A5, %A4
  %C5 = mul i64 %B5, %B5
  %T5 = trunc i64 %C5 to i32
  %R5 = call i32 @use32(i32 %T5)

  ; make sure all zext have another use that is not dominated by the trunc inst.
  call i32 @use64(i64 %A1)
  call i32 @use64(i64 %A2)
  call i32 @use64(i64 %A3)
  call i32 @use64(i64 %A4)
  call i32 @use64(i64 %A5)

  ret void
}

define void @multi_use_vec(<2 x i32> %X) {
; CHECK-LABEL: @multi_use_vec(
; CHECK-NEXT:    [[A1:%.*]] = zext <2 x i32> [[X:%.*]] to <2 x i64>
; CHECK-NEXT:    [[B1:%.*]] = add <2 x i32> [[X]], <i32 15, i32 15>
; CHECK-NEXT:    [[C1:%.*]] = mul <2 x i32> [[B1]], [[B1]]
; CHECK-NEXT:    [[R1:%.*]] = call <2 x i32> @use32_vec(<2 x i32> [[C1]])
; CHECK-NEXT:    [[A2:%.*]] = zext <2 x i32> [[R1]] to <2 x i64>
; CHECK-NEXT:    [[B2:%.*]] = or <2 x i32> [[R1]], <i32 15, i32 15>
; CHECK-NEXT:    [[C2:%.*]] = mul <2 x i32> [[B2]], [[B2]]
; CHECK-NEXT:    [[R2:%.*]] = call <2 x i32> @use32_vec(<2 x i32> [[C2]])
; CHECK-NEXT:    [[A3:%.*]] = zext <2 x i32> [[R2]] to <2 x i64>
; CHECK-NEXT:    [[B3:%.*]] = xor <2 x i32> [[R2]], <i32 15, i32 15>
; CHECK-NEXT:    [[C3:%.*]] = mul <2 x i32> [[B3]], [[B3]]
; CHECK-NEXT:    [[R3:%.*]] = call <2 x i32> @use32_vec(<2 x i32> [[C3]])
; CHECK-NEXT:    [[A4:%.*]] = zext <2 x i32> [[R3]] to <2 x i64>
; CHECK-NEXT:    [[B4:%.*]] = and <2 x i32> [[R3]], <i32 15, i32 15>
; CHECK-NEXT:    [[C4:%.*]] = mul nuw nsw <2 x i32> [[B4]], [[B4]]
; CHECK-NEXT:    [[R4:%.*]] = call <2 x i32> @use32_vec(<2 x i32> [[C4]])
; CHECK-NEXT:    [[A5:%.*]] = zext <2 x i32> [[R4]] to <2 x i64>
; CHECK-NEXT:    [[B5:%.*]] = sub <2 x i32> [[R4]], [[R3]]
; CHECK-NEXT:    [[C5:%.*]] = mul <2 x i32> [[B5]], [[B5]]
; CHECK-NEXT:    [[R5:%.*]] = call <2 x i32> @use32_vec(<2 x i32> [[C5]])
; CHECK-NEXT:    [[TMP1:%.*]] = call <2 x i32> @use64_vec(<2 x i64> [[A1]])
; CHECK-NEXT:    [[TMP2:%.*]] = call <2 x i32> @use64_vec(<2 x i64> [[A2]])
; CHECK-NEXT:    [[TMP3:%.*]] = call <2 x i32> @use64_vec(<2 x i64> [[A3]])
; CHECK-NEXT:    [[TMP4:%.*]] = call <2 x i32> @use64_vec(<2 x i64> [[A4]])
; CHECK-NEXT:    [[TMP5:%.*]] = call <2 x i32> @use64_vec(<2 x i64> [[A5]])
; CHECK-NEXT:    ret void
;
  %A1 = zext <2 x i32> %X to <2 x i64>
  %B1 = add <2 x i64> %A1, <i64 15, i64 15>
  %C1 = mul <2 x i64> %B1, %B1
  %T1 = trunc <2 x i64> %C1 to <2 x i32>
  %R1 = call <2 x i32> @use32_vec(<2 x i32> %T1)

  %A2 = zext <2 x i32> %R1 to <2 x i64>
  %B2 = or <2 x i64> %A2, <i64 15, i64 15>
  %C2 = mul <2 x i64> %B2, %B2
  %T2 = trunc <2 x i64> %C2 to <2 x i32>
  %R2 = call <2 x i32> @use32_vec(<2 x i32> %T2)

  %A3 = zext <2 x i32> %R2 to <2 x i64>
  %B3 = xor <2 x i64> %A3, <i64 15, i64 15>
  %C3 = mul <2 x i64> %B3, %B3
  %T3 = trunc <2 x i64> %C3 to <2 x i32>
  %R3 = call <2 x i32> @use32_vec(<2 x i32> %T3)

  %A4 = zext <2 x i32> %R3 to <2 x i64>
  %B4 = and <2 x i64> %A4, <i64 15, i64 15>
  %C4 = mul <2 x i64> %B4, %B4
  %T4 = trunc <2 x i64> %C4 to <2 x i32>
  %R4 = call <2 x i32> @use32_vec(<2 x i32> %T4)

  %A5 = zext <2 x i32> %R4 to <2 x i64>
  %B5 = sub <2 x i64> %A5, %A4
  %C5 = mul <2 x i64> %B5, %B5
  %T5 = trunc <2 x i64> %C5 to <2 x i32>
  %R5 = call <2 x i32> @use32_vec(<2 x i32> %T5)

  ; make sure all zext have another use that is not dominated by the trunc inst.
  call <2 x i32> @use64_vec(<2 x i64> %A1)
  call <2 x i32> @use64_vec(<2 x i64> %A2)
  call <2 x i32> @use64_vec(<2 x i64> %A3)
  call <2 x i32> @use64_vec(<2 x i64> %A4)
  call <2 x i32> @use64_vec(<2 x i64> %A5)

  ret void
}
