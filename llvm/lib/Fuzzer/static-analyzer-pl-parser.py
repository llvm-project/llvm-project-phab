import argparse
from collections import defaultdict
import fnmatch
import os
import plistlib
import sys


parser = argparse.ArgumentParser()
parser.add_argument('-pd', '--plist_directory', default = '', help = 'path to the directory containing the plist files generated by static analyzer')
parser.add_argument('-o', '--output_file', default = '/tmp/file_map', help = 'name of output file')

def findFiles(pattern, path):
  ''' Get list of files in path matching pattern. '''

  result = []
  for root, dirs, files in os.walk(path):
    for name in files:
      if fnmatch.fnmatch(name, pattern):
        result.append(os.path.join(root, name))

  return result

def parseArgs():
  ''' Get the list of plist files. '''

  cl_args = parser.parse_args()
  pl_dir = cl_args.plist_directory
  out_file = cl_args.output_file
  if not pl_dir:
    print('ERROR: missing plistdirectory argument.')
    sys.exit()

  return findFiles('*.plist', pl_dir), out_file

def getInterestingLinesFromFile(file_name, file_lines_map):
  ''' Map interesting lines to code files from a given plist file. '''

  parsed_map = plistlib.readPlist(file_name)
  interesting_files = parsed_map['files']
  if not interesting_files:
    return file_lines_map
  diagnostics_list = parsed_map['diagnostics']
  for bug_dict in diagnostics_list: # each bug has one dict in that list
    location_dict = bug_dict['location']
    fname = interesting_files[location_dict['file']]
    file_lines_map[fname].add(location_dict['line'])
    path_list = bug_dict['path']
    for path_node_dict in path_list:
      if 'location' in path_node_dict.keys():
        fname = interesting_files[path_node_dict['location']['file']]
        file_lines_map[fname].add(path_node_dict['location']['line'])
      elif 'edges' in path_node_dict.keys():
        for d in path_node_dict['edges']:
          loc1 = d['start'][0]
          loc2 = d['end'][0]
          fname1 = interesting_files[loc1['file']]
          fname2 = interesting_files[loc2['file']]
          file_lines_map[fname1].add(loc1['line'])
          file_lines_map[fname2].add(loc2['line'])


  return file_lines_map


def getInterestingLinesFromFileList(file_list):
  ''' list the list of interesting lines to code files from plist files. '''

  file_lines_map = defaultdict(set)

  for file_name in file_list:
    file_lines_map = getInterestingLinesFromFile(file_name, file_lines_map)

  return file_lines_map

def main():
  pl_files, out_file = parseArgs();
  file_lines_map = getInterestingLinesFromFileList(pl_files);
  with open(out_file, 'w') as out:
    for file_name in file_lines_map:
      for line in file_lines_map[file_name]:
        out.write(file_name + ":" +  str(line) + "\n")

if __name__ == '__main__':
            main()
