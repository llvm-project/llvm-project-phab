# -*- Python -*-

import os
import subprocess

# Setup config name.
config.name = 'CRT' + config.name_suffix

# Setup source root.
config.test_source_root = os.path.dirname(__file__)


def get_library_path(clang, file):
    cmd = subprocess.Popen([clang, '-print-file-name=%s' % file],
                           stdout=subprocess.PIPE,
                           env=config.environment)
    if not cmd.stdout:
      lit_config.fatal("Couldn't find the library path for '%s'" % file)
    dir = cmd.stdout.read().strip()
    if sys.platform in ['win32'] and execute_external:
        # Don't pass dosish path separator to msys bash.exe.
        dir = dir.replace('\\', '/')
    # Ensure the result is an ascii string, across Python2.5+ - Python3.
    return str(dir.decode('ascii'))


def build_invocation(compile_flags):
    return ' ' + ' '.join([config.clang] + compile_flags) + ' '


# Setup substitutions.
config.substitutions.append(
    ('%clang ', build_invocation([config.target_cflags])))
config.substitutions.append(
    ('%clangxx ',
     build_invocation(config.cxx_mode_flags + [config.target_cflags])))

base_lib = os.path.join(config.compiler_rt_libdir, "%s.o")
config.substitutions.append(('%crtbegin', base_lib % "crtbegin"))
config.substitutions.append(('%crtbeginS', base_lib % "crtbeginS"))
config.substitutions.append(('%crtend', base_lib % "crtend"))
config.substitutions.append(('%crtendS', base_lib % "crtendS"))

config.substitutions.append(
    ('%crt1', get_library_path(config.clang, 'crt1.o')))
config.substitutions.append(
    ('%crti', get_library_path(config.clang, 'crti.o')))
config.substitutions.append(
    ('%crtn', get_library_path(config.clang, 'crtn.o')))

# Default test suffixes.
config.suffixes = ['.c', '.cc', '.cpp']

if config.host_os not in ['Linux']:
  config.unsupported = True
