# -*- Python -*-

import os

# Setup config name.
config.name = 'TBAASanitizer' + getattr(config, 'name_suffix', 'default')

# Setup source root.
config.test_source_root = os.path.dirname(__file__)

# Setup default compiler flags used with -fsanitize=tbaa option.
clang_tbaasan_cflags = (["-fsanitize=tbaa",
                      "-mno-omit-leaf-frame-pointer",
                      "-fno-omit-frame-pointer",
                      "-fno-optimize-sibling-calls"] +
                      [config.target_cflags] +
                      config.debug_info_flags)
clang_tbaasan_cxxflags = config.cxx_mode_flags + clang_tbaasan_cflags

def build_invocation(compile_flags):
  return " " + " ".join([config.clang] + compile_flags) + " "

config.substitutions.append( ("%clang_tbaasan ", build_invocation(clang_tbaasan_cflags)) )
config.substitutions.append( ("%clangxx_tbaasan ", build_invocation(clang_tbaasan_cxxflags)) )

# Default test suffixes.
config.suffixes = ['.c', '.cc', '.cpp']

# TBAASanitizer tests are currently supported on Linux only.
if config.host_os not in ['Linux']:
  config.unsupported = True

if config.target_arch != 'aarch64':
  config.available_features.add('stable-runtime')

